package onlinebookshop;
import java.sql.*;
import java.util.*;

public class onlinebookshop {

    private static final String DB_URL = "jdbc:postgresql://localhost:5432/bookshopdb";
    private static final String DB_USER = "postgres";
    private static final String DB_PASSWORD = "123";

    
    private static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
    }

    
    static class User {
        int id;
        String username;
        String email;

        User(String username, String email) {
            this.username = username;
            this.email = email;
        }
    }

    static class Book {
        String title;
        int authorId;
        int categoryId;
        double price;

        Book(String title, int authorId, int categoryId, double price) {
            this.title = title;
            this.authorId = authorId;
            this.categoryId = categoryId;
            this.price = price;
        }
    }
    static class OrderProcessor extends Thread {
        private final int userId;

        OrderProcessor(int userId) {
            this.userId = userId;
        }

        @Override
        public void run() {
            try (Scanner sc = new Scanner(System.in);
                 Connection conn = getConnection()) {

                conn.setAutoCommit(false);

                PreparedStatement psOrder = conn.prepareStatement(
                        "INSERT INTO orders (user_id) VALUES (?)", Statement.RETURN_GENERATED_KEYS);
                psOrder.setInt(1, userId);
                psOrder.executeUpdate();

                ResultSet rs = psOrder.getGeneratedKeys();
                int orderId = 0;
                if (rs.next()) orderId = rs.getInt(1);

                while (true) {
                    System.out.print("Enter Book ID to add (or 0 to finish): ");
                    int bookId = sc.nextInt();
                    if (bookId == 0) break;

                    System.out.print("Enter quantity: ");
                    int qty = sc.nextInt();

                    PreparedStatement psItem = conn.prepareStatement(
                            "INSERT INTO order_items (order_id, book_id, quantity) VALUES (?, ?, ?)");
                    psItem.setInt(1, orderId);
                    psItem.setInt(2, bookId);
                    psItem.setInt(3, qty);
                    psItem.executeUpdate();
                }

                conn.commit();
                System.out.println("\n Order placed successfully!");

            } catch (Exception e) {
                System.out.println("Error placing order: " + e.getMessage());
            }
        }
    }

    private static void addUser(Scanner sc) {
        try (Connection conn = getConnection()) {
            System.out.print("Enter user name: ");
            String username = sc.nextLine();

            System.out.print("Enter email: ");
            String email = sc.nextLine();

            PreparedStatement ps = conn.prepareStatement("INSERT INTO users (username, email) VALUES (?, ?)");
            ps.setString(1, username);
            ps.setString(2, email);
            ps.executeUpdate();

            System.out.println("User added successfully.");
        } catch (SQLException e) {
            System.out.println("Failed to add user: " + e.getMessage());
        }
    }

    private static void addAuthor(Scanner sc) {
        try (Connection conn = getConnection()) {
            System.out.print("Enter author name: ");
            String name = sc.nextLine();

            PreparedStatement ps = conn.prepareStatement("INSERT INTO authors (name) VALUES (?)");
            ps.setString(1, name);
            ps.executeUpdate();

            System.out.println("Author added.");
        } catch (SQLException e) {
            System.out.println(" Failed to add author: " + e.getMessage());
        }
    }

    private static void addCategory(Scanner sc) {
        try (Connection conn = getConnection()) {
            System.out.print("Enter category name: ");
            String name = sc.nextLine();

            PreparedStatement ps = conn.prepareStatement("INSERT INTO categories (name) VALUES (?)");
            ps.setString(1, name);
            ps.executeUpdate();

            System.out.println("Category added.");
        } catch (SQLException e) {
            System.out.println(" Failed to add category: " + e.getMessage());
        }
    }

    private static void addBook(Scanner sc) {
        try (Connection conn = getConnection()) {
            System.out.print("Enter book title: ");
            String title = sc.nextLine();

            System.out.print("Enter author ID: ");
            int authorId = sc.nextInt();

            System.out.print("Enter category ID: ");
            int categoryId = sc.nextInt();

            System.out.print("Enter price: ");
            double price = sc.nextDouble();
            sc.nextLine(); // Clear buffer

            PreparedStatement ps = conn.prepareStatement(
                    "INSERT INTO books (title, author_id, category_id, price) VALUES (?, ?, ?, ?)");
            ps.setString(1, title);
            ps.setInt(2, authorId);
            ps.setInt(3, categoryId);
            ps.setDouble(4, price);
            ps.executeUpdate();

            System.out.println(" Book added.");
        } catch (SQLException e) {
            System.out.println(" Failed to add book: " + e.getMessage());
        }
    }

    private static void showOrders() {
        try (Connection conn = getConnection()) {
            Statement stmt = conn.createStatement();

            ResultSet rs = stmt.executeQuery("""
                SELECT o.order_id, u.username, o.order_date, b.title, oi.quantity
                FROM orders o
                JOIN users u ON o.user_id = u.user_id
                JOIN order_items oi ON o.order_id = oi.order_id
                JOIN books b ON oi.book_id = b.book_id
                ORDER BY o.order_id
            """);

            System.out.println("\n Orders Summary:");
            while (rs.next()) {
                System.out.printf("Order ID: %d | User: %s | Book: %s | Qty: %d | Date: %s%n",
                        rs.getInt("order_id"),
                        rs.getString("username"),
                        rs.getString("title"),
                        rs.getInt("quantity"),
                        rs.getTimestamp("order_date").toString());
            }
        } catch (SQLException e) {
            System.out.println("Could not fetch orders: " + e.getMessage());
        }
    }

  
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n=ONLINE BOOKSHOP MENU =");
            System.out.println("1.Add User");
            System.out.println("2.Add Author");
            System.out.println("3.Add Category");
            System.out.println("4.Add Book");
            System.out.println("5. Place Order (Multithreaded)");
            System.out.println("6.View All Orders");
            System.out.println("0.Exit");
            System.out.print(" Your choice: ");
            choice = sc.nextInt();
            sc.nextLine();

            switch (choice) {
                case 1 -> addUser(sc);
                case 2 -> addAuthor(sc);
                case 3 -> addCategory(sc);
                case 4 -> addBook(sc);
                case 5 -> {
                    System.out.print("Enter User ID to place order: ");
                    int userId = sc.nextInt();
                    sc.nextLine();
                    new OrderProcessor(userId).start();
                }
                case 6 -> showOrders();
                case 0 -> System.out.println(" Thank you for using the Online Bookshop!");
                default -> System.out.println(" Invalid option. Try again.");
            }

        } while (choice != 0);

        sc.close();
    }
}
